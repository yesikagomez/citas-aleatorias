{"version":3,"sources":["components/Datos.jsx","components/Cita.jsx","components/ListaCita.jsx","Routes.js","App.js","serviceWorker.js","index.js"],"names":["Datos","cita","autor","tw","id","class","className","href","target","Cita","aleatorio","quote","author","twitter","encodeURIComponent","console","log","ListaCita","state","axios","get","then","res","Autordata","data","quotes","num","length","Math","floor","random","setState","catch","this","Component","Routes","path","component","listacita","App","React","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"ySA4BeA,MAzBf,YAAkC,IAAjBC,EAAgB,EAAhBA,KAAKC,EAAW,EAAXA,MAAMC,EAAK,EAALA,GACxB,OACI,yBAAKC,GAAG,aACJ,yBAAKC,MAAM,gBACP,2BAAOC,UAAU,oBAAoBF,GAAG,QAAxC,IAAiDH,EAAjD,KACA,6BACA,6BACA,2BAAOK,UAAU,oBAAoBF,GAAG,UAAxC,IAAmDF,GACnD,6BACI,uBAAGK,KAAK,IAAID,UAAU,+BAClB,4BAAQA,UAAU,8BAA8BF,GAAG,aAAnD,eAGR,uBAAGG,KAAMJ,EAAIG,UAAU,WAAWE,OAAO,SAASJ,GAAG,eACrD,4BAAQE,UAAU,kBACd,0BAAMA,UAAU,QAChB,uBAAGA,UAAU,wBCJlBG,MAZf,YAA8B,IAAbC,EAAY,EAAZA,UACTT,EAAMS,EAAUC,MAChBT,EAAQQ,EAAUE,OAClBC,EAAU,8EAAgFC,mBAAmB,IAAMb,EAAO,KAAOC,GAErI,OADAa,QAAQC,IAAIH,GAER,6BACI,kBAAC,EAAD,CAAOZ,KAAMA,EAAMC,MAAOA,EAAOC,GAAIU,M,iBCmBlCI,E,4MAxBXC,MAAQ,CACJR,UAAY,I,kEAGK,IAAD,OAChBS,IAAMC,IAAI,0IACTC,MAAK,SAAAC,GACN,IAAIC,EAAYD,EAAIE,KAAKC,OACrBC,EAAMH,EAAUI,OAChBjB,EAAWa,EAAUK,KAAKC,MAAMD,KAAKE,SAAWJ,IACpD,EAAKK,SAAS,CACdrB,iBAGHsB,MAAMjB,QAAQC,O,+BAEL,IACCN,EAAauB,KAAKf,MAAlBR,UACP,OACI,kBAAC,EAAD,CAAMA,UAAWA,Q,GApBLwB,aCQTC,EARA,WACX,OACI,gCACI,kBAAC,IAAD,CAAOC,KAAK,IAAIC,UAAaC,MCO1BC,G,6KANX,OACE,kBAAC,EAAD,U,GAHYC,IAAMN,YCMJO,QACa,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YCXRC,IAASC,OACP,kBAAC,IAAD,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHlB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB/B,MAAK,SAAAgC,GACJA,EAAaC,gBAEdtB,OAAM,SAAAuB,GACLxC,QAAQwC,MAAMA,EAAMC,c","file":"static/js/main.7ce1910d.chunk.js","sourcesContent":["import React from 'react'\r\nimport './../App.css'\r\n\r\nfunction Datos ({cita,autor,tw}) {\r\n    return(\r\n        <div id=\"quote-box\">\r\n            <div class=\"notification\">\r\n                <label className=\"title is-1 purple\" id=\"text\">\"{cita}\"</label>\r\n                <br/>\r\n                <br/>\r\n                <label className=\"title is-3 purple\" id=\"author\">-{autor}</label>\r\n                <div>\r\n                    <a href=\"/\" className=\"buttons has-addons is-right\">\r\n                        <button className=\"button is-danger is-rounded\" id=\"new-quote\">New Quote</button>\r\n                    </a>\r\n                </div>\r\n                <a href={tw} className=\"buttons \" target=\"_blank\" id=\"tweet-quote\">\r\n                <button className=\"button primary\">\r\n                    <span className=\"icon\">\r\n                    <i className=\"fa fa-twitter\" ></i>\r\n                    </span>\r\n                </button>\r\n                </a>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Datos;","import React from 'react'\r\nimport Datos from './Datos'\r\n\r\nfunction Cita ({ aleatorio}) {\r\n    let cita= aleatorio.quote;\r\n    let autor = aleatorio.author;\r\n    let twitter = 'https://twitter.com/intent/tweet?hashtags=quotes&related=freecodecamp&text=' + encodeURIComponent('\"' + cita + '\" ' + autor);\r\n    console.log(twitter);\r\n    return(\r\n        <div>\r\n            <Datos cita={cita} autor={autor} tw={twitter}/>\r\n        </div> \r\n    )\r\n}\r\n\r\nexport default Cita;","import React, {Component} from 'react';\r\nimport Cita from './Cita';\r\nimport axios from 'axios';\r\n\r\nclass ListaCita extends Component {\r\n    state = {\r\n        aleatorio : \"\"\r\n      }    \r\n    \r\n    componentDidMount() {\r\n        axios.get('https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json')\r\n        .then(res => {\r\n        let Autordata = res.data.quotes;\r\n        let num = Autordata.length;\r\n        let aleatorio= Autordata[Math.floor(Math.random() * num)]\r\n        this.setState({\r\n        aleatorio\r\n        })\r\n    })\r\n    .catch(console.log)\r\n}\r\n    render() {\r\n        const {aleatorio} = this.state;\r\n        return(\r\n            <Cita aleatorio={aleatorio} />\r\n        )\r\n    }\r\n}\r\n\r\nexport default ListaCita;","import React from 'react';\r\nimport {Switch, Route} from 'react-router-dom';\r\nimport listacita from './components/ListaCita';\r\n\r\nconst Routes = () => {\r\n    return(\r\n        <switch>\r\n            <Route path='/' component = {listacita} />\r\n        </switch>\r\n    ) \r\n}\r\n\r\nexport default Routes;","import React, {Component} from 'react';\r\nimport Routes from './Routes'\r\nimport './index.css';\r\nimport './App.css'\r\nimport 'bulma/css/bulma.min.css';\r\n\r\nclass App extends React.Component {\r\n  render() {\r\n    return(\r\n      <Routes/>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n      // [::1] is the IPv6 localhost address.\r\n      window.location.hostname === '[::1]' ||\r\n      // 127.0.0.0/8 are considered localhost for IPv4.\r\n      window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n      )\r\n  );\r\n  \r\n  export function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n      // The URL constructor is available in all browsers that support SW.\r\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n      if (publicUrl.origin !== window.location.origin) {\r\n        // Our service worker won't work if PUBLIC_URL is on a different origin\r\n        // from what our page is served on. This might happen if a CDN is used to\r\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n        return;\r\n      }\r\n  \r\n      window.addEventListener('load', () => {\r\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n  \r\n        if (isLocalhost) {\r\n          // This is running on localhost. Let's check if a service worker still exists or not.\r\n          checkValidServiceWorker(swUrl, config);\r\n  \r\n          // Add some additional logging to localhost, pointing developers to the\r\n          // service worker/PWA documentation.\r\n          navigator.serviceWorker.ready.then(() => {\r\n            console.log(\r\n              'This web app is being served cache-first by a service ' +\r\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n            );\r\n          });\r\n        } else {\r\n          // Is not localhost. Just register service worker\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      });\r\n    }\r\n  }\r\n  \r\n  function registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n      .register(swUrl)\r\n      .then(registration => {\r\n        registration.onupdatefound = () => {\r\n          const installingWorker = registration.installing;\r\n          if (installingWorker == null) {\r\n            return;\r\n          }\r\n          installingWorker.onstatechange = () => {\r\n            if (installingWorker.state === 'installed') {\r\n              if (navigator.serviceWorker.controller) {\r\n                // At this point, the updated precached content has been fetched,\r\n                // but the previous service worker will still serve the older\r\n                // content until all client tabs are closed.\r\n                console.log(\r\n                  'New content is available and will be used when all ' +\r\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n                );\r\n  \r\n                // Execute callback\r\n                if (config && config.onUpdate) {\r\n                  config.onUpdate(registration);\r\n                }\r\n              } else {\r\n                // At this point, everything has been precached.\r\n                // It's the perfect time to display a\r\n                // \"Content is cached for offline use.\" message.\r\n                console.log('Content is cached for offline use.');\r\n  \r\n                // Execute callback\r\n                if (config && config.onSuccess) {\r\n                  config.onSuccess(registration);\r\n                }\r\n              }\r\n            }\r\n          };\r\n        };\r\n      })\r\n      .catch(error => {\r\n        console.error('Error during service worker registration:', error);\r\n      });\r\n  }\r\n  \r\n  function checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n      headers: { 'Service-Worker': 'script' },\r\n    })\r\n      .then(response => {\r\n        // Ensure service worker exists, and that we really are getting a JS file.\r\n        const contentType = response.headers.get('content-type');\r\n        if (\r\n          response.status === 404 ||\r\n          (contentType != null && contentType.indexOf('javascript') === -1)\r\n        ) {\r\n          // No service worker found. Probably a different app. Reload the page.\r\n          navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister().then(() => {\r\n              window.location.reload();\r\n            });\r\n          });\r\n        } else {\r\n          // Service worker found. Proceed as normal.\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      })\r\n      .catch(() => {\r\n        console.log(\r\n          'No internet connection found. App is running in offline mode.'\r\n        );\r\n      });\r\n  }\r\n  \r\n  export function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n      navigator.serviceWorker.ready\r\n        .then(registration => {\r\n          registration.unregister();\r\n        })\r\n        .catch(error => {\r\n          console.error(error.message);\r\n        });\r\n    }\r\n  }\r\n  ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter} from 'react-router-dom';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}